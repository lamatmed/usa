generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  nni       String   @unique
  password  String
  name      String
  role      Role     @default(USER)
// Création d'un utilisateur avec des champs optionnels
export const createUser = async (data: {
  nni: string;
  password: string;
  name: string;
  role?: "ADMIN" | "USER";
  address?: string;
  job?: string;
  domain?: string;
  cv?: string;
  photo?: string;
}) => {
  const hashedPassword = await bcrypt.hash(data.password, 10);
  return await prisma.user.create({
    data: { ...data, password: hashedPassword },
  });
};

// Récupérer un utilisateur par ID avec toutes les infos
export const getUserById = async (id: string) => {
  return await prisma.user.findUnique({
    where: { id },
    select: {
      id: true,
      nni: true,
      name: true,
      role: true,
      address: true,
      job: true,
      domain: true,
      cv: true,
      photo: true,
      createdAt: true,
      updatedAt: true,
    },
  });
};

  address   String?
  job       String?
  domain    String?
  cv        String?   // Stocke un lien vers le CV ou un fichier
  photo     String?   // Stocke un lien vers la photo de profil
  votes     Vote[]    // Relation avec le modèle Vote
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Vote {
  id            String     @id @default(cuid())
  userId        String     @unique // Un utilisateur ne peut voter qu'une fois
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  choice        String     // Stocke le label du choix
  choiceOption  VoteOption @relation("VoteOptionVotes", fields: [choice], references: [label], onDelete: Cascade) // Relation avec VoteOption
  createdAt     DateTime   @default(now())
}

model VoteOption {
  id        String   @id @default(cuid())
  label     String   @unique
  votes     Vote[]   @relation("VoteOptionVotes") // Relation inverse avec Vote
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  imageUrl    String?  // <- champ optionnel pour l'URL de l'image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
